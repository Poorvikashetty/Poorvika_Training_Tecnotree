-- Create the CUSTOMER table
CREATE TABLE CUSTOMER (
customerId INTEGER PRIMARY KEY,
name VARCHAR(50),
email VARCHAR(100)
);
-- Create the ORDER table with a foreign key to the CUSTOMER table
CREATE TABLE ORDER1 (
orderId INTEGER PRIMARY KEY,
customerId INTEGER,
orderDate DATE,
FOREIGN KEY (customerId) REFERENCES CUSTOMER(customerId)
);

-- PRODUCT table schema
CREATE TABLE PRODUCT (
  productId INTEGER PRIMARY KEY,
  name VARCHAR(50),
  price DECIMAL(10, 2)
);

-- ORDER_PRODUCT table schema
CREATE TABLE ORDER_PRODUCT (
  orderId INTEGER,
  productId INTEGER,
  quantity INTEGER,
  PRIMARY KEY (orderId, productId),
  FOREIGN KEY (orderId) REFERENCES ORDER1(orderId),
  FOREIGN KEY (productId) REFERENCES PRODUCT(productId)
);

insert into CUSTOMER values(1,"abc","abc.com");
insert into CUSTOMER values(2,"pqr","pqr.com");
insert into CUSTOMER values(3,"xyz","xyz.com");
insert into ORDER1 values(10,1,"2011-05-05");
insert into ORDER1 values(20,2,"2011-05-06");
insert into ORDER1 values(30,3,"2011-05-07");
insert into PRODUCT values(100,"pen1",1000);
insert into PRODUCT values(200,"pen2",2000);
insert into PRODUCT values(300,"pen3",3000);
insert into ORDER_PRODUCT values(10,100,2);
insert into ORDER_PRODUCT values(20,200,4);
insert into ORDER_PRODUCT values(30,300,6);
delete from customer where customer_name="abc" ;

select * from CUSTOMER;
select * from ORDER1;
select * from PRODUCT;
select * from ORDER_PRODUCT;
SELECT c.name, o.orderId, o.orderDate
FROM CUSTOMER c
JOIN ORDER1 o ON c.customerId = o.customerId;


-- Query to retrieve all orders for a specific customer by name
SELECT o.orderId, o.orderDate, c.name
FROM CUSTOMER c
JOIN ORDER1 o ON c.customerId = o.customerId
WHERE c.name = 'abc';

-- Query to retrieve all orders with a total value greater than $100 for a specific customer by ID
SELECT o.orderId, o.orderDate, SUM(p.price) AS totalValue
FROM CUSTOMER c
JOIN ORDER1 o ON c.customerId = o.customerId
JOIN ORDER_PRODUCT op ON o.orderId = op.orderId
JOIN PRODUCT p ON op.productId = p.productId
WHERE c.customerId = 1
GROUP BY o.orderId, o.orderDate
HAVING SUM(p.price) > 10;

-- Query to retrieve all products that have never been ordered
SELECT p.productId, p.name, p.price
FROM PRODUCT p
WHERE NOT EXISTS (
  SELECT 1
  FROM ORDER_PRODUCT op
  WHERE op.productId = p.productId
);


-- Start a transaction
START TRANSACTION;

-- Update the price of a product
UPDATE PRODUCT SET price = 10.99 WHERE productId = 1;

-- Update the quantity of a product in an order
UPDATE ORDER_PRODUCT SET quantity = 5 WHERE orderId = 1 AND productId = 1;

-- Retrieve the total value of the updated order
SELECT SUM(p.price * op.quantity) AS totalValue
FROM ORDER1 o
JOIN ORDER_PRODUCT op ON o.orderId = op.orderId
JOIN PRODUCT p ON op.productId = p.productId
WHERE o.orderId = 10;

-- Commit the transaction
COMMIT;





-- Create a stored procedure to insert a new customer

-- Create a view to retrieve all orders with their customer information
CREATE VIEW ORDERS_WITH_CUSTOMERS AS
SELECT o.orderId, o.orderDate, c.customerId, c.name, c.email
FROM ORDER1 o
JOIN CUSTOMER c ON o.customerId = c.customerId;

select * from ORDERS_WITH_CUSTOMERS;


-- Create a view to retrieve all products with their total quantity sold
CREATE VIEW PRODUCTS_WITH_TOTALS AS
SELECT p.productId, p.name, p.price, SUM(op.quantity) AS totalQuantity
FROM PRODUCT p
JOIN ORDER_PRODUCT op ON p.productId = op.productId
GROUP BY p.productId;

select * from PRODUCTS_WITH_TOTALS;

-- Create a view to retrieve the total revenue generated by each customer
CREATE VIEW CUSTOMER_REVENUE AS
SELECT c.customerId, c.name, c.email, SUM(p.price * op.quantity) AS totalRevenue
FROM CUSTOMER c
JOIN ORDER1 o ON c.customerId = o.customerId
JOIN ORDER_PRODUCT op ON o.orderId = op.orderId
JOIN PRODUCT p ON op.productId = p.productId
GROUP BY c.customerId;

select * from CUSTOMER_REVENUE;



-- view for customer order

CREATE VIEW customer_orders_view AS
SELECT c.customer_name, c.email, c.phone, o.orderdate, p.name, p.price, o.order_quantity
FROM Customer c
JOIN Order1 o ON c.customerId = o.customerId
JOIN Product p ON o.productId = p.productId;

select * from customer_orders_view;

-- view for topselling product
CREATE VIEW top_selling_products_view AS
SELECT p.product_name, SUM(o.order_quantity) AS total_quantity_sold
FROM Products p
JOIN Orders o ON p.product_id = o.product_id
GROUP BY p.product_name
ORDER BY total_quantity_sold DESC
LIMIT 5;

-- view for the customer who has more than one product
CREATE VIEW customers_with_multiple_orders_view AS
SELECT c.customer_name, c.customer_email, c.customer_phone, COUNT(*) AS total_orders
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING COUNT(*) > 1;

-- product_sales_by_month_view
CREATE VIEW product_sales_by_month_view AS
SELECT p.product_name, MONTH(o.order_date) AS month, YEAR(o.order_date) AS year, SUM(o.order_quantity * p.product_price) AS total_sales
FROM Products p
JOIN Orders o ON p.product_id = o.product_id
GROUP BY p.product_id, MONTH(o.order_date), YEAR(o.order_date);


alter table customer
add phone integer;
alter table order1
add order_quantity integer;
alter table order1
add productId integer;
